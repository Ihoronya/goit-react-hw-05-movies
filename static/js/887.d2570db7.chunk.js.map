{"version":3,"file":"static/js/887.d2570db7.chunk.js","mappings":"sLAEkBA,OAAOC,OAAO,CAC9B,OACA,KACA,KACA,KACA,KACA,QAEF,SAASC,EAAcC,EAAMC,GAC3B,OAAIC,MAAMC,QAAQH,GACTA,EAAKI,KAAI,SAACC,GAAD,OAAmB,OAATA,EAAgB,KAAOJ,EAAOI,EAAxC,KAEdC,EAAAA,EAAAA,IAASN,GACJH,OAAOU,KAAKP,GAAMQ,QAAO,SAACC,EAAQC,GAEvC,OADAD,EAAOC,GAAOT,EAAOD,EAAKU,IACnBD,CACR,GAAE,CAAC,GAEM,MAART,EACKC,EAAOD,GAET,IACR,C,gJCfGW,GAAWC,EAAAA,EAAAA,IAAW,SAAmBC,EAAOC,GAClD,IAAQC,EAAuBF,EAAvBE,UAAcC,GAAtB,OAA+BH,EAA/B,GACMI,GAASC,EAAAA,EAAAA,KACf,OAAuBC,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,KADwB,QAGtBN,IAAAA,EACAC,WAAWM,EAAAA,EAAAA,IAAG,oBAAqBN,GACnC,MAAOE,EAAO,MACXD,GAGR,G,4FCjBD,GAA0CM,E,QAAAA,IAAoB,QAA9D,eAAKC,EAAL,KAAyBR,EAAzB,I,6MCUIJ,GAAOC,EAAAA,EAAAA,IAAW,SAAeY,EAAOC,GAC1C,OAOIC,EAAAA,EAAAA,IAAiBF,GANnBG,EADF,EACEA,UACAC,EAFF,EAEEA,SAFF,IAGEf,UAAAA,OAHF,MAGc,SAHd,EAIEC,EAJF,EAIEA,QACAE,EALF,EAKEA,MACGC,GANL,YAQMY,GAASC,EAAAA,EAAAA,IAAoB,OAAQN,GAC3C,OAAuBL,EAAAA,EAAAA,KACrBY,EAAAA,EAAAA,KADwB,gBAGtBN,IAAAA,EACAE,WAAWN,EAAAA,EAAAA,IAAG,cAAeM,GAC7BK,OAAK,QACHC,QAAS,OACTC,cAAerB,EACfsB,eAAgBrB,EAChBsB,WAAYpB,EACZqB,SAAU,WACVd,SAAU,EACVe,SAAU,cACPT,EAAO,YAETZ,GAfmB,IAgBtBW,UAA0BT,EAAAA,EAAAA,KAAID,EAAAA,EAAoB,CAAE,MAAOW,EAAQD,SAAAA,MAGxE,G,+ICtCGT,GAAcE,EAAAA,EAAAA,IAAW,SAAsBkB,EAAOC,GACxD,IAAQC,EAAwCF,EAAxCE,UAAW5B,EAA6B0B,EAA7B1B,WAAY6B,EAAiBH,EAAjBG,IAAQC,GAAvC,OAAgDJ,EAAhD,GACA,OAAuBK,EAAAA,EAAAA,KAAI,OAAD,QAAUC,MAAOJ,EAAW,OAAQ5B,EAAY2B,IAAAA,EAAKE,IAAAA,GAAQC,GACxF,IACDxB,EAAY,YAAc,c,kCCyD1B,I,iJCtCA,IAAI2B,GAAQC,EAAAA,EAAAA,IAAW,SAAgBC,EAAOpB,GAC5C,IACEqB,EAYED,EAZFC,YACAC,EAWEF,EAXFE,SACAC,EAUEH,EAVFG,IACAC,EASEJ,EATFI,OACAC,EAQEL,EARFK,MACAC,EAOEN,EAPFM,IACAzC,EAMEmC,EANFnC,QACA0C,EAKEP,EALFO,eACAC,EAIER,EAJFQ,YATF,EAaIR,EAHFS,iBAAAA,OAVF,MAUqB,oBAVrB,EAWEC,EAEEV,EAFFU,eACGC,GAZL,OAaIX,EAbJ,GAeMY,EAAuC,MAAX/C,GAClC0C,UAFyC,IAAhBN,QAAuC,IAAbC,GAI7CW,ED1CR,SAAkB1C,GAChB,IACE+B,EAQE/B,EARF+B,QACAY,EAOE3C,EAPF2C,IACAd,EAME7B,EANF6B,OACAe,EAKE5C,EALF4C,OACAC,EAIE7C,EAJF6C,QACAZ,EAGEjC,EAHFiC,YACAa,EAEE9C,EAFF8C,MACAd,EACEhC,EADFgC,eAEF,GAA4Be,EAAAA,EAAAA,UAAS,WAArC,eAAOT,EAAP,KAAeU,EAAf,MACAC,EAAAA,EAAAA,YAAU,WACRD,EAAUL,EAAM,UAAY,UAC7B,GAAE,CAACA,IACJ,IAAMO,GAAWC,EAAAA,EAAAA,UACXC,GAAOC,EAAAA,EAAAA,cAAY,WACvB,GAAKV,EAAL,CAEAW,IACA,IAAMC,EAAM,IAAIC,MAChBD,EAAIZ,IAAMA,EACNV,IACFsB,EAAItB,YAAcA,GAChBJ,IACF0B,EAAIE,OAAS5B,GACXiB,IACFS,EAAIT,MAAQA,GACVf,IACFwB,EAAIxB,QAAUA,GAChBwB,EAAIG,OAAS,SAACC,GACZL,IACAN,EAAU,UACA,MAAVJ,GAA0BA,EAAOe,EAClC,EACDJ,EAAIK,QAAU,SAACC,GACbP,IACAN,EAAU,UACC,MAAXH,GAA2BA,EAAQgB,EACpC,EACDX,EAASY,QAAUP,CAtBjB,CAuBH,GAAE,CAACZ,EAAKV,EAAaJ,EAAQiB,EAAOF,EAAQC,EAASd,IAChDuB,EAAQ,WACRJ,EAASY,UACXZ,EAASY,QAAQJ,OAAS,KAC1BR,EAASY,QAAQF,QAAU,KAC3BV,EAASY,QAAU,KAEtB,EAWC,OAVFC,EAAAA,EAAAA,IAAoB,WAClB,IAAI/B,EAKJ,MAHe,YAAXM,GACFc,IAEK,WACLE,GACD,CACF,GAAE,CAAChB,EAAQc,EAAMpB,IACXA,EAAiB,SAAWM,CACpC,CClBgB0B,EAAQ,kBAClBnC,GADkB,IAErBQ,YAAAA,EACAD,eAAgBK,KAEZwB,EDcsB,SAAC3B,EAAQJ,GAAT,MAAyC,WAAXI,GAA4C,sBAArBJ,GAAuD,WAAXI,GAA4C,YAArBJ,CAAxH,CCdFhC,CAAwBwC,EAAQJ,GACpDiB,GAAM,QACV9C,IAAAA,EACAyD,UAAW/B,EACXV,eAAgBS,GACbO,EAA4BD,EAzCnC,SAAc9D,GAAyB,MAAjByF,EAAiB,uDAAJ,GAC3B5E,EAAQiE,OAAOxD,OAAO,GAAItB,GADK,UAEnByF,GAFmB,IAErC,2BAA8B,KAAnB3E,EAAmB,QACxBA,KAAOD,UACFA,EAAMC,EAEhB,CANoC,+BAOrC,OAAOD,CACR,CAiCyC6E,CAAK5B,EAAM,CAAC,UAAW,YAE/D,OAAIyB,EACElC,IAEmBsC,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,KADwB,QAGtB5C,GAAIjC,EACJ,UAAW,4BACXuC,IAAKF,GACFyB,KAIcc,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,KADwB,QAGtB5C,GAAIjC,EACJuC,IAAAA,EACAC,OAAAA,EACAI,YAAAA,EACA3C,QAAAA,EACA6C,eAAAA,EACA,UAAW,gBACRgB,GAGR,IACD5B,EAAM,YAAc,O,8OC9EhB3B,GAAOE,EAAAA,EAAAA,IAAW,SAAeqE,EAAOC,GAC1C,IACEC,EAYEF,EAZFE,cACAC,EAWEH,EAXFG,IACAC,EAUEJ,EAVFI,OACAC,EASEL,EATFK,UACAC,EAQEN,EARFM,OACAC,EAOEP,EAPFO,IACAC,EAMER,EANFQ,SACAC,EAKET,EALFS,SACAC,EAIEV,EAJFU,aACAvF,EAGE6E,EAHF7E,YACAC,EAEE4E,EAFF5E,gBACGe,GAZL,OAaI6D,EAbJ,GAcMW,EAAS,CACbC,QAAS,OACTC,kBAAmBX,EACnBY,QAASX,EACTY,WAAYX,EACZY,cAAeX,EACfY,gBAAiB9F,EACjB+F,WAAYZ,EACZa,QAASZ,EACTa,aAAcZ,EACda,aAAcZ,EACdnF,iBAAkBoF,EAClBnF,oBAAqBH,GAEvB,OAAuBkG,EAAAA,EAAAA,KAAIpG,EAAAA,EAAAA,KAAD,QAAe+E,IAAAA,EAAK,MAAOU,GAAWxE,GACjE,IACDV,EAAK,YAAc,O,gGC1BfR,GAAasG,EAAAA,EAAAA,IACf,SAAqBC,EAAOC,GAC1B,IA0BoB,EA1BZC,EAAiEF,EAAjEE,QAASC,EAAwDH,EAAxDG,SAAUxG,EAA8CqG,EAA9CrG,SAAUyG,EAAoCJ,EAApCI,QAASlB,EAA2Bc,EAA3Bd,cAAkBmB,GAAhE,OAAyEL,EAAzE,GACMM,GAAQzH,EAAAA,EAAAA,KACRiH,EAAkBZ,EAkB5B,SAAwBqB,EAAOD,GAC7B,OAAOE,EAAAA,EAAAA,IAAcD,GAAO,SAACE,GAC3B,IALUrF,EAKJ,GAASsF,EAAAA,EAAAA,IAAS,QAASD,EAJf,kBADRrF,EAKmCqF,GAJxC,UAA2BrF,EAA3B,MAAmCA,EAIzBsF,CAAsCJ,GACrD,OAAiB,OAAVG,EAAiB,KAAjB,kCAAmD,EAAnD,UACR,GACF,CAvB2ChC,CAAeS,EAAeoB,IAwBlD,EAxB0EJ,GAyBzFM,EAAAA,EAAAA,IACL,GACA,SAACC,GAAD,OAAqB,OAAVA,EAAiB,KAAjB,iBAAkCA,EAAlC,oBAAX,KA1BA,OAAuBxG,EAAAA,EAAAA,KACrBE,GADwB,QAGtB8F,IAAAA,EACAvB,IAAK0B,EACLzE,UAAWwE,EACXQ,OAAQhH,EACRmG,gBAAAA,GACGO,GAGR,IAEH5G,EAAWmH,YAAc,Y,kJCvBrBjF,GAAMjC,EAAAA,EAAAA,GAAO,OACjBiC,EAAIkF,YAAc,MAClB,IAAI5G,GAASE,EAAAA,EAAAA,IAAW,SAAiB2G,EAAOC,GAC9C,IAAQpH,EAAwCmH,EAAxCnH,KAAR,EAAgDmH,EAAlClH,cAAAA,OAAd,SAAuCe,GAAvC,OAAgDmG,EAAhD,GACM/F,EAASnB,EAAgB,CAAEkB,QAAS,OAAQkG,WAAY,SAAUjH,eAAgB,UAAa,GACrG,OAAuBkH,EAAAA,EAAAA,KACrBtF,GADwB,QAGtBoF,IAAAA,EACAG,QAASvH,EACTwH,OAAK,kBACApG,GADA,IAEHqG,WAAY,EACZC,SAAU,KAET1G,GAGR,IACDV,EAAO4G,YAAc,UACR1G,EAAAA,EAAAA,IAAW,SAAiB2G,EAAOC,GAC9C,IAAQpH,EAAkBmH,EAAlBnH,KAASgB,GAAjB,OAA0BmG,EAA1B,GACA,OAAuBG,EAAAA,EAAAA,KAAIhH,GAAD,QAAWN,KAAAA,EAAMoH,IAAAA,EAAK,aAAc,UAAapG,GAC5E,IACMkG,YAAc,Q,gGC3BjB5G,EAAY,SAACH,GAAD,OAA2BwH,EAAAA,EAAAA,KACzC5H,EAAAA,EAAAA,KAD4C,gBAG1CK,UAAW,sBACRD,GAJuC,IAK1Ca,OAAK,QACH4G,QAAS,eACTtG,KAAM,WACNU,SAAU,GACP7B,EAAK,SATE,EAahBG,EAAU,YAAc,Y,wKCDpBuH,GAAQC,EAAAA,EAAAA,IAAW,SAACC,EAAOnH,GAC7B,IACEG,EAWEgH,EAXFhH,SACWD,EAUTiH,EAVFxB,UACAyB,EASED,EATFC,MACArH,EAQEoH,EARFpH,QAJF,EAYIoH,EAPFE,QAAAA,OALF,MAKY,SALZ,EAMEC,EAMEH,EANFG,KACAC,EAKEJ,EALFI,SACAnI,EAIE+H,EAJF/H,QACAoI,EAGEL,EAHFK,UACAC,EAEEN,EAFFM,mBACGC,GAXL,OAYIP,EAZJ,GAaMxB,EAAYxF,EAAW,MAAyB,MAAjBD,EAAwBA,EAAgB,SACvEyH,GAAeC,EAAAA,EAAAA,UACnB,kBC7BJ,SAA0BC,GACxB,IAAQlC,EAAuBkC,EAAvBlC,QAAS3F,EAAc6H,EAAd7H,UACX8H,EAAgB,CACpBzD,OAAQ,CACN0D,GAAIpC,EACJqC,GAAI,EACJC,gBAAiB,EACjBC,kBAAmB,OAErB,iBAAkB,CAChBH,GAAIpC,EACJqC,GAAI,EACJC,gBAAiB,EACjBC,kBAAmB,OAErB5D,IAAK,CACH0D,GAAIrC,EACJoC,GAAI,EACJE,gBAAiB,MACjBC,kBAAmB,GAErB,cAAe,CACbF,GAAIrC,EACJoC,GAAI,EACJE,gBAAiB,MACjBC,kBAAmB,IAGrB,MAAK,CACL,KAAK5J,EAAAA,EAAAA,IACH0B,GACA,SAACa,GAAD,OAAWiH,EAAcjH,EAAzB,IAGL,CDLSpB,CAAiB,CAAE4H,QAAAA,EAAS1B,UAAAA,GAAlC,GACA,CAAC0B,EAAS1B,IAENwC,IAAe/I,EACfgJ,GAAqBX,IAAuBU,EAC5CxJ,GAASiJ,EAAAA,EAAAA,UAAQ,WACrB,IAAMS,EErCV,SAA0BtI,GACxB,OAAOuI,EAAAA,SAAAA,QAAiBvI,GAAUwI,QAChC,SAACF,GAAD,OAAWG,EAAAA,EAAAA,gBAAeH,EAA1B,GAEH,CFiCyBlJ,CAAiBoI,GACvC,OAAOa,EAAoBC,EAAgBA,EAAcI,KAAI,SAACxJ,EAAOyJ,GACnE,IAAMC,EAA2B,qBAAd1J,EAAM0J,IAAsB1J,EAAM0J,IAAMD,EACrDE,EAASF,EAAQ,IAAML,EAActB,OAErC8B,EAASpB,GADsB/H,EAAAA,EAAAA,KAAIoJ,EAAW,CAAEvB,SAAUtI,GAAS0J,GACtB1J,EACnD,IAAKkJ,EACH,OAAOU,EACT,IAAMrJ,GAAgBuJ,EAAAA,EAAAA,cACpB3J,EACA,CACE4J,MAAOrB,IAGLsB,EAAWL,EAAS,KAAOpJ,EACjC,OAAuBN,EAAAA,EAAAA,MAAKgK,EAAAA,SAAU,CAAE3B,SAAU,CAChDsB,EACAI,IACGN,EACN,GACF,GAAE,CACDvJ,EACAuI,EACAQ,EACAC,EACAX,EACAF,IAEIhI,GAAaK,EAAAA,EAAAA,IAAG,eAAgB4H,GACtC,OAAuB9H,EAAAA,EAAAA,KACrByJ,EAAAA,EAAAA,KADwB,gBAGtBnJ,IAAAA,EACAQ,QAAS,OACTD,WAAY6G,EACZgC,eAAgBrJ,EAChBsJ,cAAe1D,EACfzB,SAAUoD,EACVlG,IAAK+G,OAAa,EAASd,EAC3BG,UAAWjI,GACRmI,GAXmB,IAYtBH,SAAU5I,IAGf,IACDsI,EAAM,YAAc,O","sources":["../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/card/src/card-body.tsx","../node_modules/@chakra-ui/card/src/card-context.tsx","../node_modules/@chakra-ui/card/src/card.tsx","../node_modules/@chakra-ui/image/src/native-image.tsx","../node_modules/@chakra-ui/image/src/use-image.ts","../node_modules/@chakra-ui/image/src/image.tsx","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/layout/src/simple-grid.tsx","../node_modules/@chakra-ui/layout/src/box.tsx","../node_modules/@chakra-ui/layout/src/stack/stack-item.tsx","../node_modules/@chakra-ui/layout/src/stack/stack.tsx","../node_modules/@chakra-ui/layout/src/stack/stack.utils.tsx","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs"],"sourcesContent":["// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { forwardRef, HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardBodyProps extends HTMLChakraProps<\"div\"> {}\n\nexport const CardBody = forwardRef<CardBodyProps, \"div\">(function CardBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const styles = useCardStyles()\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card__body\", className)}\n      __css={styles.body}\n      {...rest}\n    />\n  )\n})\n","import { createStylesContext } from \"@chakra-ui/system\"\n\nexport const [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\")\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  forwardRef,\n  HTMLChakraProps,\n  ThemingProps,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { CardStylesProvider } from \"./card-context\"\n\nexport type CardOptions = {\n  /**\n   * The flex direction of the card\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * The flex alignment of the card\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The flex distribution of the card\n   */\n  justify?: SystemProps[\"justifyContent\"]\n}\n\nexport interface CardProps\n  extends HTMLChakraProps<\"div\">,\n    CardOptions,\n    ThemingProps<\"Card\"> {}\n\nexport const Card = forwardRef<CardProps, \"div\">(function Card(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Card\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card\", className)}\n      __css={{\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container,\n      }}\n      {...rest}\n    >\n      <CardStylesProvider value={styles}>{children}</CardStylesProvider>\n    </chakra.div>\n  )\n})\n","import { PropsOf, forwardRef } from \"@chakra-ui/system\"\n\nexport interface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nexport const NativeImage = forwardRef(function NativeImage(\n  props: NativeImageProps,\n  ref: React.Ref<any>,\n) {\n  const { htmlWidth, htmlHeight, alt, ...rest } = props\n  return (\n    <img width={htmlWidth} height={htmlHeight} ref={ref} alt={alt} {...rest} />\n  )\n})\n\nNativeImage.displayName = \"NativeImage\"\n","import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n","import {\n  chakra,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport {\n  FallbackStrategy,\n  shouldShowFallbackImage,\n  useImage,\n  UseImageProps,\n} from \"./use-image\"\nimport { NativeImage, NativeImageOptions } from \"./native-image\"\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note 🚨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n\n  /**\n   * - beforeLoadOrError(default): loads the fallbackImage while loading the src\n   * - onError: loads the fallbackImage only if there is an error fetching the src\n   *\n   * @default \"beforeLoadOrError\"\n   * @see Issue https://github.com/chakra-ui/chakra-ui/issues/5581\n   */\n  fallbackStrategy?: FallbackStrategy\n  /**\n   * Defining which referrer is sent when fetching the resource.\n   * @type React.HTMLAttributeReferrerPolicy\n   */\n  referrerPolicy?: React.HTMLAttributeReferrerPolicy\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">(function Image(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props\n\n  const providedFallback = fallbackSrc !== undefined || fallback !== undefined\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   *\n   * shouldIgnoreFallbackImage determines if we have the possibility to render a fallback image\n   */\n  const shouldIgnoreFallbackImage =\n    loading != null ||\n    // use can opt out of fallback image\n    ignoreFallback ||\n    // if the user doesn't provide any kind of fallback we should ignore it\n    !providedFallback\n\n  /**\n   * returns `loaded` if fallback is ignored\n   */\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage,\n  })\n\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (showFallbackImage) {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nImage.displayName = \"Image\"\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface BoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/box\n */\nexport const Box = chakra(\"div\")\n\nBox.displayName = \"Box\"\n\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\ntype Omitted = \"size\" | \"boxSize\" | \"width\" | \"height\" | \"w\" | \"h\"\n\nexport interface SquareProps extends Omit<BoxProps, Omitted> {\n  /**\n   * The size (width and height) of the square\n   */\n  size?: BoxProps[\"width\"]\n  /**\n   * If `true`, the content will be centered in the square\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\nexport const Square = forwardRef<SquareProps, \"div\">(function Square(\n  props,\n  ref,\n) {\n  const { size, centerContent = true, ...rest } = props\n\n  const styles: SystemStyleObject = centerContent\n    ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }\n    : {}\n\n  return (\n    <Box\n      ref={ref}\n      boxSize={size}\n      __css={{\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0,\n      }}\n      {...rest}\n    />\n  )\n})\n\nSquare.displayName = \"Square\"\n\nexport const Circle = forwardRef<SquareProps, \"div\">(function Circle(\n  props,\n  ref,\n) {\n  const { size, ...rest } = props\n  return <Square size={size} ref={ref} borderRadius=\"9999px\" {...rest} />\n})\n\nCircle.displayName = \"Circle\"\n","import { ChakraComponent, chakra } from \"@chakra-ui/system\"\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nStackItem.displayName = \"StackItem\"\n","import { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cloneElement, Fragment, useMemo } from \"react\"\n\nimport { StackItem } from \"./stack-item\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   * @default \"0.5rem\"\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   * @default \"column\"\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   *\n   * @default false\n   *\n   * @deprecated - Use `direction=\"row\"` or `HStack` instead\n   */\n  isInline?: boolean\n}\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children)\n    return shouldUseChildren\n      ? validChildren\n      : validChildren.map((child, index) => {\n          // Prefer provided child key, fallback to index\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n          const isLast = index + 1 === validChildren.length\n          const wrappedChild = <StackItem key={key}>{child}</StackItem>\n          const _child = shouldWrapChildren ? wrappedChild : child\n\n          if (!hasDivider) return _child\n\n          const clonedDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerStyle,\n            },\n          )\n\n          const _divider = isLast ? null : clonedDivider\n\n          return (\n            <Fragment key={key}>\n              {_child}\n              {_divider}\n            </Fragment>\n          )\n        })\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children,\n  ])\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={direction}\n      flexWrap={wrap}\n      gap={hasDivider ? undefined : spacing}\n      className={_className}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nStack.displayName = \"Stack\"\n","import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value: keyof typeof dividerStyles) => dividerStyles[value],\n    ),\n  }\n}\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n"],"names":["Object","freeze","mapResponsive","prop","mapper","Array","isArray","map","item","isObject","keys","reduce","result","key","ref","chakra","rest","styles","useCardStyles","div","__css","cx","props","CardBody","forwardRef","createStylesContext","CardStylesProvider","children","direction","useMultiStyleConfig","justify","align","display","Card","omitThemingProps","justifyContent","alignItems","position","minWidth","wordWrap","container","value","htmlWidth","htmlHeight","alt","width","height","NativeImage","displayName","fallback","keysToOmit","srcSet","fit","loading","ignoreFallback","crossOrigin","fallbackStrategy","referrerPolicy","providedFallback","shouldIgnoreFallbackImage","status","useImage","showFallbackImage","shared","objectFit","src","onLoad","onError","sizes","useState","setStatus","useEffect","imageRef","useRef","load","useCallback","flush","img","Image","srcset","onload","event","onerror","error","current","useSafeLayoutEffect","omit","objectPosition","as","assign","clone","fallbackSrc","object","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","Grid","getToken","spacingX","spacingY","spacing","minChildWidth","theme","widthToColumns","countToColumns","_value","SimpleGrid","count","useTheme","toPx","n","Square","size","centerContent","boxSize","Box","flexShrink","flexGrow","Circle","borderRadius","StackItem","flex","isInline","Fragment","directionProp","wrap","divider","className","shouldWrapChildren","dividerStyle","getDividerStyles","hasDivider","shouldUseChildren","Stack","options","dividerStyles","my","mx","borderLeftWidth","borderBottomWidth","clones","validChildren","child","Children","filter","isValidElement","index","isLast","length","wrappedChild","clonedDivider","getValidChildren","useMemo","_divider","_className","jsxs","cloneElement","flexDirection","flexWrap"],"sourceRoot":""}