{"version":3,"file":"static/js/247.8c296c2b.chunk.js","mappings":"8PA2DA,UA9Ca,WACX,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAQR,OANAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAQH,GACLI,MAAK,SAAAC,GAAG,OAAIN,EAAQM,EAAZ,IACRC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAhB,GACb,GAAE,CAACP,KAGF,8BACmB,IAAhBF,EAAKY,SACJ,SAAC,IAAD,CAAYC,QAAS,CAAC,EAAG,EAAG,EAAG,GAAIC,QAAS,CAAC,EAAG,KAAM,GAAIC,GAAG,IAA7D,SACGf,EAAKgB,KACJ,SAAAC,GAAE,OACAA,EAAGC,eACD,SAAC,IAAD,CACEC,KAAK,KACLC,WAAW,sCAFb,UAKE,UAAC,IAAD,WACGH,EAAGC,eACF,SAAC,IAAD,CACEG,IAAG,yCAAoCJ,EAAGC,cAC1CI,IAAKL,EAAGM,KACRC,UAAU,QACVL,KAAM,CAAEM,KAAM,WAGlB,SAAC,IAAD,CAASC,KAAK,KAAKC,GAAG,KAAKC,GAAG,KAA9B,SACGX,EAAGM,QAEN,UAAC,IAAD,CAAMM,SAAS,KAAf,wBAAgCZ,EAAGa,iBAdhCb,EAAGc,UALZ,OA4Bb,C,mMCvDKC,EAAM,gCACNC,EAAM,mCAECC,EAAgB,mCAAG,6GAELC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,wCACiBC,IAHZ,cAEtBG,EAFsB,yBAMrBA,EAASC,MANY,gCAQ5B3B,QAAQC,IAAR,MAR4B,yDAAH,qDAYhB2B,EAAe,mCAAG,WAAMC,GAAN,gGAEJJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACNO,EADM,oBACQN,EADR,oBAFI,cAErBG,EAFqB,yBAMpBA,EAASC,MANW,gCAQ3B3B,QAAQC,IAAR,MAR2B,yDAAH,sDAYfN,EAAO,mCAAG,WAAMkC,GAAN,gGAEIJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACNO,EADM,4BACgBN,EADhB,oBAFJ,cAEbG,EAFa,yBAMZA,EAASC,KAAKrC,MANF,gCAQnBU,QAAQC,IAAR,MARmB,yDAAH,sDAYP6B,EAAU,mCAAG,WAAMD,GAAN,gGAECJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACNO,EADM,4BACgBN,EADhB,oBAFD,cAEhBG,EAFgB,yBAKfA,EAASC,KAAKI,SALC,gCAOtB/B,QAAQC,IAAR,MAPsB,yDAAH,sDAWV+B,EAAgB,mCAAG,WAAMC,GAAN,kFACjBR,EAAAA,EAAAA,GAAM,GAAD,OAAIH,EAAJ,gBAAuB,CACvCY,OAAQ,CACNC,QAASZ,EACTU,MAAOA,KAERrC,MAAK,SAAA8B,GAAQ,OAAIA,EAASC,IAAb,IANc,mFAAH,qD,sEClDXS,OAAOC,OAAO,CAC9B,OACA,KACA,KACA,KACA,KACA,QAEF,SAASC,EAAcC,EAAMC,GAC3B,OAAIC,MAAMC,QAAQH,GACTA,EAAKjC,KAAI,SAACqC,GAAD,OAAmB,OAATA,EAAgB,KAAOH,EAAOG,EAAxC,KAEdC,EAAAA,EAAAA,IAASL,GACJH,OAAOS,KAAKN,GAAMO,QAAO,SAACC,EAAQC,GAEvC,OADAD,EAAOC,GAAOR,EAAOD,EAAKS,IACnBD,CACR,GAAE,CAAC,GAEM,MAARR,EACKC,EAAOD,GAET,IACR,C,gJCfGU,GAAWC,EAAAA,EAAAA,IAAW,SAAmBC,EAAOC,GAClD,IAAQC,EAAuBF,EAAvBE,UAAcC,GAAtB,OAA+BH,EAA/B,GACMI,GAASC,EAAAA,EAAAA,KACf,OAAuBC,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,KADwB,QAGtBN,IAAAA,EACAC,WAAWM,EAAAA,EAAAA,IAAG,oBAAqBN,GACnC,MAAOE,EAAO,MACXD,GAGR,G,4FCjBD,GAA0CM,E,QAAAA,IAAoB,QAA9D,eAAKC,EAAL,KAAyBR,EAAzB,I,6MCUIJ,GAAOC,EAAAA,EAAAA,IAAW,SAAeY,EAAOC,GAC1C,OAOIC,EAAAA,EAAAA,IAAiBF,GANnBG,EADF,EACEA,UACAC,EAFF,EAEEA,SAFF,IAGEf,UAAAA,OAHF,MAGc,SAHd,EAIEC,EAJF,EAIEA,QACAE,EALF,EAKEA,MACGC,GANL,YAQMY,GAASC,EAAAA,EAAAA,IAAoB,OAAQN,GAC3C,OAAuBL,EAAAA,EAAAA,KACrBY,EAAAA,EAAAA,KADwB,gBAGtBN,IAAAA,EACAE,WAAWN,EAAAA,EAAAA,IAAG,cAAeM,GAC7BK,OAAK,QACHC,QAAS,OACTC,cAAerB,EACfsB,eAAgBrB,EAChBsB,WAAYpB,EACZqB,SAAU,WACVd,SAAU,EACVe,SAAU,cACPT,EAAO,YAETZ,GAfmB,IAgBtBW,UAA0BT,EAAAA,EAAAA,KAAID,EAAAA,EAAoB,CAAE,MAAOW,EAAQD,SAAAA,MAGxE,G,+ICtCGT,GAAcE,EAAAA,EAAAA,IAAW,SAAsBkB,EAAOC,GACxD,IAAQlE,EAAwCiE,EAAxCjE,UAAWuC,EAA6B0B,EAA7B1B,WAAY4B,EAAiBF,EAAjBE,IAAQC,GAAvC,OAAgDH,EAAhD,GACA,OAAuBI,EAAAA,EAAAA,KAAI,OAAD,QAAUC,MAAOtE,EAAW,OAAQuC,EAAY2B,IAAAA,EAAKC,IAAAA,GAAQC,GACxF,IACDvB,EAAY,YAAc,c,kCCyD1B,I,iJCtCA,IAAI0B,GAAQC,EAAAA,EAAAA,IAAW,SAAgBC,EAAOnB,GAC5C,IACEoB,EAYED,EAZFC,YACAC,EAWEF,EAXFE,SACAC,EAUEH,EAVFG,IACAC,EASEJ,EATFI,OACAC,EAQEL,EARFK,MACAC,EAOEN,EAPFM,IACAxC,EAMEkC,EANFlC,QACAyC,EAKEP,EALFO,eACAC,EAIER,EAJFQ,YATF,EAaIR,EAHFS,iBAAAA,OAVF,MAUqB,oBAVrB,EAWEC,EAEEV,EAFFU,eACGC,GAZL,OAaIX,EAbJ,GAeMY,EAAuC,MAAX9C,GAClCyC,UAFyC,IAAhBN,QAAuC,IAAbC,GAI7CzE,ED1CR,SAAkB2C,GAChB,IACE8B,EAQE9B,EARF8B,QACA5E,EAOE8C,EAPF9C,IACA0E,EAME5B,EANF4B,OACAa,EAKEzC,EALFyC,OACAC,EAIE1C,EAJF0C,QACAV,EAGEhC,EAHFgC,YACAW,EAEE3C,EAFF2C,MACAZ,EACE/B,EADF+B,eAEF,GAA4BnG,EAAAA,EAAAA,UAAS,WAArC,eAAOyG,EAAP,KAAeO,EAAf,MACA3G,EAAAA,EAAAA,YAAU,WACR2G,EAAU1F,EAAM,UAAY,UAC7B,GAAE,CAACA,IACJ,IAAM2F,GAAWC,EAAAA,EAAAA,UACXC,GAAOC,EAAAA,EAAAA,cAAY,WACvB,GAAK9F,EAAL,CAEA+F,IACA,IAAMC,EAAM,IAAIC,MAChBD,EAAIhG,IAAMA,EACN8E,IACFkB,EAAIlB,YAAcA,GAChBJ,IACFsB,EAAIE,OAASxB,GACXe,IACFO,EAAIP,MAAQA,GACVb,IACFoB,EAAIpB,QAAUA,GAChBoB,EAAIG,OAAS,SAACC,GACZL,IACAL,EAAU,UACA,MAAVH,GAA0BA,EAAOa,EAClC,EACDJ,EAAIK,QAAU,SAACC,GACbP,IACAL,EAAU,UACC,MAAXF,GAA2BA,EAAQc,EACpC,EACDX,EAASY,QAAUP,CAtBjB,CAuBH,GAAE,CAAChG,EAAK8E,EAAaJ,EAAQe,EAAOF,EAAQC,EAASZ,IAChDmB,EAAQ,WACRJ,EAASY,UACXZ,EAASY,QAAQJ,OAAS,KAC1BR,EAASY,QAAQF,QAAU,KAC3BV,EAASY,QAAU,KAEtB,EAWC,OAVFC,EAAAA,EAAAA,IAAoB,WAClB,IAAI3B,EAKJ,MAHe,YAAXM,GACFU,IAEK,WACLE,GACD,CACF,GAAE,CAACZ,EAAQU,EAAMhB,IACXA,EAAiB,SAAWM,CACpC,CClBgBsB,EAAQ,kBAClB/B,GADkB,IAErBQ,YAAAA,EACAD,eAAgBK,KAEZoB,EDcsB,SAACvB,EAAQJ,GAAT,MAAyC,WAAXI,GAA4C,sBAArBJ,GAAuD,WAAXI,GAA4C,YAArBJ,CAAxH,CCdF/B,CAAwB7C,EAAQgF,GACpDa,GAAM,QACVzC,IAAAA,EACAoD,UAAW3B,EACXV,eAAgBS,GACbO,EAA4BD,EAzCnC,SAAc5D,GAAyB,MAAjBmF,EAAiB,uDAAJ,GAC3BvE,EAAQ4D,OAAOnD,OAAO,GAAIrB,GADK,UAEnBmF,GAFmB,IAErC,2BAA8B,KAAnBtE,EAAmB,QACxBA,KAAOD,UACFA,EAAMC,EAEhB,CANoC,+BAOrC,OAAOD,CACR,CAiCyCwE,CAAKxB,EAAM,CAAC,UAAW,YAE/D,OAAIqB,EACE9B,IAEmBkC,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,KADwB,QAGtBxC,GAAIhC,EACJ,UAAW,4BACXsC,IAAKF,GACFqB,KAIcc,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,KADwB,QAGtBxC,GAAIhC,EACJsC,IAAAA,EACAC,OAAAA,EACAI,YAAAA,EACA1C,QAAAA,EACA4C,eAAAA,EACA,UAAW,gBACRY,GAGR,IACDxB,EAAM,YAAc,O,0JC3EhB1B,GAAUE,EAAAA,EAAAA,IAAW,SAAkBP,EAAOuE,GAC9C,IAAIxE,GAASyE,EAAAA,EAAAA,IAAe,UAAWxE,GACzC,GAA+BiB,EAAAA,EAAAA,IAAiBjB,GAA1BG,GAAtB,EAAQsE,WAAR,aACA,OAAuBC,EAAAA,EAAAA,KACrB5E,EAAAA,EAAAA,IADwB,gBAGtByE,IAAAA,EACAE,WAAWrE,EAAAA,EAAAA,IAAG,iBAAkBJ,EAAMyE,YACnCtE,GALmB,IAMtB,MAAOJ,IAGZ,IACDM,EAAQ,YAAc,S,8OChBlBA,GAAOE,EAAAA,EAAAA,IAAW,SAAeoE,EAAOC,GAC1C,IACEC,EAYEF,EAZFE,cACAC,EAWEH,EAXFG,IACAC,EAUEJ,EAVFI,OACAC,EASEL,EATFK,UACAC,EAQEN,EARFM,OACAC,EAOEP,EAPFO,IACAC,EAMER,EANFQ,SACAC,EAKET,EALFS,SACAC,EAIEV,EAJFU,aACAtF,EAGE4E,EAHF5E,YACAC,EAEE2E,EAFF3E,gBACGe,GAZL,OAaI4D,EAbJ,GAcMW,EAAS,CACbC,QAAS,OACTC,kBAAmBX,EACnBY,QAASX,EACTY,WAAYX,EACZY,cAAeX,EACfY,gBAAiB7F,EACjB8F,WAAYZ,EACZa,QAASZ,EACTa,aAAcZ,EACda,aAAcZ,EACdlF,iBAAkBmF,EAClBlF,oBAAqBH,GAEvB,OAAuBiG,EAAAA,EAAAA,KAAInG,EAAAA,EAAAA,KAAD,QAAe8E,IAAAA,EAAK,MAAOU,GAAWvE,GACjE,IACDV,EAAK,YAAc,O,gGC1BfR,GAAaqG,EAAAA,EAAAA,IACf,SAAqBC,EAAOC,GAC1B,IA0BoB,EA1BZpJ,EAAiEmJ,EAAjEnJ,QAASqJ,EAAwDF,EAAxDE,SAAUtG,EAA8CoG,EAA9CpG,SAAUuG,EAAoCH,EAApCG,QAASjB,EAA2Bc,EAA3Bd,cAAkBkB,GAAhE,OAAyEJ,EAAzE,GACMK,GAAQtH,EAAAA,EAAAA,KACR+G,EAAkBZ,EAkB5B,SAAwBoB,EAAOD,GAC7B,OAAOE,EAAAA,EAAAA,IAAcD,GAAO,SAACE,GAC3B,IALUnF,EAKJ,GAASoF,EAAAA,EAAAA,IAAS,QAASD,EAJf,kBADRnF,EAKmCmF,GAJxC,UAA2BnF,EAA3B,MAAmCA,EAIzBoF,CAAsCJ,GACrD,OAAiB,OAAVG,EAAiB,KAAjB,kCAAmD,EAAnD,UACR,GACF,CAvB2C/B,CAAeS,EAAemB,IAwBlD,EAxB0ExJ,GAyBzF0J,EAAAA,EAAAA,IACL,GACA,SAACC,GAAD,OAAqB,OAAVA,EAAiB,KAAjB,iBAAkCA,EAAlC,oBAAX,KA1BA,OAAuBtG,EAAAA,EAAAA,KACrBE,GADwB,QAGtB6F,IAAAA,EACAvB,IAAKyB,EACLxE,UAAWuE,EACXQ,OAAQ9G,EACRkG,gBAAAA,GACGM,GAGR,IAEH1G,EAAWiH,YAAc,Y","sources":["components/Cast/Cast.jsx","services/apiService.js","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/card/src/card-body.tsx","../node_modules/@chakra-ui/card/src/card-context.tsx","../node_modules/@chakra-ui/card/src/card.tsx","../node_modules/@chakra-ui/image/src/native-image.tsx","../node_modules/@chakra-ui/image/src/use-image.ts","../node_modules/@chakra-ui/image/src/image.tsx","../node_modules/@chakra-ui/layout/src/heading.tsx","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/layout/src/simple-grid.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { getCast } from 'services/apiService';\nimport { useParams } from 'react-router-dom';\n\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Image,\n  SimpleGrid,\n  Text,\n} from '@chakra-ui/react';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getCast(movieId)\n      .then(res => setCast(res))\n      .catch(err => console.log(err));\n  }, [movieId]);\n\n  return (\n    <>\n      {cast.length !== 0 && (\n        <SimpleGrid columns={[1, 2, 3, 4]} spacing={[4, null, 6]} py=\"4\">\n          {cast.map(\n            el =>\n              el.profile_path && (\n                <Card\n                  maxW=\"sm\"\n                  bgGradient=\"linear(to-br, brand.100, brand.200)\"\n                  key={el.credit_id}\n                >\n                  <CardBody>\n                    {el.profile_path && (\n                      <Image\n                        src={`https://image.tmdb.org/t/p/w500${el.profile_path}`}\n                        alt={el.name}\n                        objectFit=\"cover\"\n                        maxW={{ base: '100%' }}\n                      />\n                    )}\n                    <Heading size=\"md\" mt=\"10\" mb=\"10\">\n                      {el.name}\n                    </Heading>\n                    <Text fontSize=\"md\">Character: {el.character}</Text>\n                  </CardBody>\n                </Card>\n              )\n          )}\n        </SimpleGrid>\n      )}\n    </>\n  );\n};\n\nexport default Cast;","import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'de618762d41dca44888c41e4f72c3f8e';\n\nexport const getTrendingFilms = async () => {\n  try {\n    const response = await axios.get(\n      `${URL}/trending/movie/week?api_key=${KEY}`\n    );\n\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getFullInfoById = async id => {\n  try {\n    const response = await axios.get(\n      `${URL}movie/${id}?api_key=${KEY}&language=en-US`\n    );\n\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getCast = async id => {\n  try {\n    const response = await axios.get(\n      `${URL}movie/${id}/credits?api_key=${KEY}&language=en-US`\n    );\n\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getReviews = async id => {\n  try {\n    const response = await axios.get(\n      `${URL}movie/${id}/reviews?api_key=${KEY}&language=en-US`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getFilmsBySearch = async query => {\n  return await axios(`${URL}search/movie`, {\n    params: {\n      api_key: KEY,\n      query: query,\n    },\n  }).then(response => response.data);\n};","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { forwardRef, HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardBodyProps extends HTMLChakraProps<\"div\"> {}\n\nexport const CardBody = forwardRef<CardBodyProps, \"div\">(function CardBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const styles = useCardStyles()\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card__body\", className)}\n      __css={styles.body}\n      {...rest}\n    />\n  )\n})\n","import { createStylesContext } from \"@chakra-ui/system\"\n\nexport const [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\")\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  forwardRef,\n  HTMLChakraProps,\n  ThemingProps,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { CardStylesProvider } from \"./card-context\"\n\nexport type CardOptions = {\n  /**\n   * The flex direction of the card\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * The flex alignment of the card\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The flex distribution of the card\n   */\n  justify?: SystemProps[\"justifyContent\"]\n}\n\nexport interface CardProps\n  extends HTMLChakraProps<\"div\">,\n    CardOptions,\n    ThemingProps<\"Card\"> {}\n\nexport const Card = forwardRef<CardProps, \"div\">(function Card(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Card\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card\", className)}\n      __css={{\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container,\n      }}\n      {...rest}\n    >\n      <CardStylesProvider value={styles}>{children}</CardStylesProvider>\n    </chakra.div>\n  )\n})\n","import { PropsOf, forwardRef } from \"@chakra-ui/system\"\n\nexport interface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nexport const NativeImage = forwardRef(function NativeImage(\n  props: NativeImageProps,\n  ref: React.Ref<any>,\n) {\n  const { htmlWidth, htmlHeight, alt, ...rest } = props\n  return (\n    <img width={htmlWidth} height={htmlHeight} ref={ref} alt={alt} {...rest} />\n  )\n})\n\nNativeImage.displayName = \"NativeImage\"\n","import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n","import {\n  chakra,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport {\n  FallbackStrategy,\n  shouldShowFallbackImage,\n  useImage,\n  UseImageProps,\n} from \"./use-image\"\nimport { NativeImage, NativeImageOptions } from \"./native-image\"\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note 🚨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n\n  /**\n   * - beforeLoadOrError(default): loads the fallbackImage while loading the src\n   * - onError: loads the fallbackImage only if there is an error fetching the src\n   *\n   * @default \"beforeLoadOrError\"\n   * @see Issue https://github.com/chakra-ui/chakra-ui/issues/5581\n   */\n  fallbackStrategy?: FallbackStrategy\n  /**\n   * Defining which referrer is sent when fetching the resource.\n   * @type React.HTMLAttributeReferrerPolicy\n   */\n  referrerPolicy?: React.HTMLAttributeReferrerPolicy\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">(function Image(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props\n\n  const providedFallback = fallbackSrc !== undefined || fallback !== undefined\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   *\n   * shouldIgnoreFallbackImage determines if we have the possibility to render a fallback image\n   */\n  const shouldIgnoreFallbackImage =\n    loading != null ||\n    // use can opt out of fallback image\n    ignoreFallback ||\n    // if the user doesn't provide any kind of fallback we should ignore it\n    !providedFallback\n\n  /**\n   * returns `loaded` if fallback is ignored\n   */\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage,\n  })\n\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (showFallbackImage) {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nImage.displayName = \"Image\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n"],"names":["useState","cast","setCast","movieId","useParams","useEffect","getCast","then","res","catch","err","console","log","length","columns","spacing","py","map","el","profile_path","maxW","bgGradient","src","alt","name","objectFit","base","size","mt","mb","fontSize","character","credit_id","URL","KEY","getTrendingFilms","axios","response","data","getFullInfoById","id","getReviews","results","getFilmsBySearch","query","params","api_key","Object","freeze","mapResponsive","prop","mapper","Array","isArray","item","isObject","keys","reduce","result","key","ref","chakra","rest","styles","useCardStyles","div","__css","cx","props","CardBody","forwardRef","createStylesContext","CardStylesProvider","children","direction","useMultiStyleConfig","justify","align","display","Card","omitThemingProps","justifyContent","alignItems","position","minWidth","wordWrap","container","value","htmlWidth","htmlHeight","width","height","NativeImage","displayName","fallback","keysToOmit","srcSet","fit","loading","ignoreFallback","crossOrigin","fallbackStrategy","referrerPolicy","providedFallback","shouldIgnoreFallbackImage","status","useImage","showFallbackImage","shared","onLoad","onError","sizes","setStatus","imageRef","useRef","load","useCallback","flush","img","Image","srcset","onload","event","onerror","error","current","useSafeLayoutEffect","omit","objectPosition","as","assign","clone","fallbackSrc","object","className","useStyleConfig","h2","Heading","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","Grid","getToken","spacingX","spacingY","minChildWidth","theme","widthToColumns","countToColumns","_value","SimpleGrid","count","useTheme","toPx","n"],"sourceRoot":""}